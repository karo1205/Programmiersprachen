Beispiel 1 der Angabe:
======================
0(9)(9~)(4!5#2+#@)@

Beispiel 2 der Angabe: (Achtung: Leerzeichen nach dem "-")
======================
A: (3!3!1- 2!1=()5!C@3#*)
C: (4!5#2+#@)
3 ^A3!4#3!@3#

3 Faktorielle:
--------------
3(3!3!1- 2!1=()5!(4!5#2+#@)@3#*)3!4#3!@3#


Operatoren:
===========
+, -, *, /, %, &, |, =, <, > : eh klar...
n!		-	Kopieren:	ersetzt das oberste Element im Stack durch das n-te Element im Stack (von oben)
n#		-	Löschen: 	nimmt das oberste Element vom Stack und löscht zusätzlich das n-te Elementim Stack (== Löschen des n-1 ten Elements) des aktuellen stacks
(x)@	-	Anwenden: 	Klammer wird entfernt Ausdruck kommt in Liste an vorderster Stelle, nichts sonst
(..)n ?	-	Auslesen: 	ersetzt den geklamerten Ausdruck durch den ASCII-Wert des n-ten Zeichens in der Klammer (linkestes Zeichen in der Klammer hat Index 0
(x)n;	-	Erweitern:	erweitert den geklammerten Ausdruck durch das durch den ASCII-Wert n repräsentierte Zeichen --> (xN)
a p$	-	Ausgabe:	gibt das Zeichen, welches durch den ASCII-Wert a repräsentiert wird, an die Stelle p im Display aus


Einige Muster:
==============
Oberstes Element löschen:
-------------------------
	2x:		
abc2# --> ab

Vertauschen der obersten 2 Elemente im Stack:
---------------------------------------------
	3!4#: 

Vertausche element n mit element m


[x y z a b] --> [x y z b a]

Holen des n-ten Elementes an die erste Stelle (erste wird zur zweiten)
----------------------------------------------------------------------
	(n+1)!(n+2)#

If (a Vergleich b) then T else F
--------------------------------
	(a b <)@(T)(F)(4!5#2+#@)@
Funktioniert prinizipiell mit <, > und =, wobei letzteres auch auf ()-Ausdrücke
Achtung: wenn a und b Zahlen: Leerzeichen!

	Beispiele:
	----------
	0 1 <(T)(F)(4!5#2+#@)@ 		(Ergibt T)
	(abc)(abc)=(T)(F)(4!5#2+#@)@ 	(Ergibt T)


Ausgabe eines Strings in Klammer:
=================================
Anfangsbedingung: 
Stack: auzugebender String

Eingabe:
(Sieben Geislein stehen auf der Wiese und aesen vor sich hin...) 
0(3!3!?(2!1~=)@(2#2#3#)(3!$1+ 4!@)(4!5#2+#@)@)4!4!6#5#4!@

Wobei (Sieben...) am Stack ist und die zweite Zeile die eigentliche formel darstellt



Näherung der Qudratwurzel
=========================
Näherungsformel der Wurzel (ca formel von Heron)
i = 0;
while(i < 10)
{
   // +2 um rundungsfehler auszugleichen
   xn = zahl/xn + xn / 2 + 2;
   i = i+1;
}
xn = xn + 1;

Stackprogramm für Näherung Q-Wurzel:
====================================
1000
0 3!2/((3!9>)@(3#1+ 4#)(2!2/5!4!/+2++ 3#3!1+ 3!4#4#5!@)(4!5#2+#@)@)5!5!5!8#7#6#5!@

Nacher stehen am Stack: zahl xn



Primzahlentest:
===============

Einfache Ausgaben:
==================
"Error": 69 0$114 1$ 114 2$ 111 3$ 114 4$
"Prim": (80 0$ 114 1$ 105 2$ 109 3$)@
"Nicht Prim": (78 0$ 105 1$ 99 2$ 104 3$ 116 4$ 32 5$ 80 6$ 114 7$ 105 8$ 109 9$)@	

am Stack sind zahl xn
1. schritt: Versuch der division durch 2
true --> nicht prim

false
divisor = 3
rest=1
while (rest=zahl % divisor != 0 && divisor < xn)
	xn =xn +2

if (rest == 0)
	print "Nicht Prim"
else
	print "Prim"	

1. Division durch 2
3!2%0=((78 0$ 105 1$ 99 2$ 104 3$ 116 4$ 32 5$ 80 6$ 114 7$ 105 8$ 109 9$)@)(LOOP)(4!5#2+#@)@

LOOP:
3
(3!3!<)@(T)((80 0$ 114 1$ 105 2$ 109 3$)@)(4!5#2+#@)@
T: (3!3!%0>)@(T2)((78 0$ 105 1$ 99 2$ 104 3$ 116 4$ 32 5$ 80 6$ 114 7$ 105 8$ 109 9$)@)(4!5#2+#@)@
T2: 2+

Ergibt: 
(3!3!>)@((4!3!%0>)@(2+)((78 0$ 105 1$ 99 2$ 104 3$ 116 4$ 32 5$ 80 6$ 114 7$ 105 8$ 109 9$)@)(4!5#2+#@)@)((80 0$ 114 1$ 105 2$ 109 3$)@)(4!5#2+#@)@

Eingebaut ins "rundherum-Formel drehen":
----------------------------------------
3((3!3!>)@((4!3!%0>)@(2+ 5!@)((78 0$ 105 1$ 99 2$ 104 3$ 116 4$ 32 5$ 80 6$ 114 7$ 105 8$ 109 9$)@2#2#3#)(4!5#2+#@)@)((80 0$ 114 1$ 105 2$ 109 3$)@2#2#3#)(4!5#2+#@)@) 5!5!5!8#7#6#5!@

Eingesetzt als LOOP:
3!2%0=((78 0$ 105 1$ 99 2$ 104 3$ 116 4$ 32 5$ 80 6$ 114 7$ 105 8$ 109 9$)@)(3((3!3!>)@((4!3!%0>)@(2+ 5!@)((78 0$ 105 1$ 99 2$ 104 3$ 116 4$ 32 5$ 80 6$ 114 7$ 105 8$ 109 9$)@2#2#3#)(4!5#2+#@)@)((80 0$ 114 1$ 105 2$ 109 3$)@2#2#3#)(4!5#2+#@)@) 5!5!5!8#7#6#5!@)(4!5#2+#@)@

Vollständiger Algorithmus:
=========================================================
Zahl - Näherung Quadratwurzel - Primtest

copy past ab hier ;-)
--------------------------
1000
0 3!2/((3!9>)@(3#1+ 4#)(2!2/5!4!/+2++ 3#3!1+ 3!4#4#5!@)(4!5#2+#@)@)5!5!5!8#7#6#5!@
3!2%0=((78 0$ 105 1$ 99 2$ 104 3$ 116 4$ 32 5$ 80 6$ 114 7$ 105 8$ 109 9$)@)(3((3!3!>)@((4!3!%0>)@(2+ 5!@)((78 0$ 105 1$ 99 2$ 104 3$ 116 4$ 32 5$ 80 6$ 114 7$ 105 8$ 109 9$)@2#2#3#)(4!5#2+#@)@)((80 0$ 114 1$ 105 2$ 109 3$)@2#2#3#)(4!5#2+#@)@) 5!5!5!8#7#6#5!@)(4!5#2+#@)@



